<?php

/**
 * This file is part of the FazlandElasticaBundle project.
 *
 * (c) Tim Nagel <tim@nagel.com.au>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Fazland\ElasticaBundle\Configuration;

class IndexConfig
{
    /**
     * The name of the index for ElasticSearch.
     *
     * @var string
     */
    private $elasticSearchName;

    /**
     * The internal name of the index. May not be the same as the name used in ElasticSearch,
     * especially if aliases are enabled.
     *
     * @var string
     */
    private $name;

    /**
     * An array of settings sent to ElasticSearch when creating the index.
     *
     * @var array
     */
    private $settings;

    /**
     * All types that belong to this index.
     *
     * @var TypeConfig[]
     */
    private $types;

    /**
     * Indicates if the index should use an alias, allowing an index repopulation to occur
     * without overwriting the current index.
     *
     * @var null|string
     */
    private $aliasStrategy;

    /**
     * Constructor expects an array as generated by the Container Configuration builder.
     *
     * @param string       $name
     * @param TypeConfig[] $types
     * @param array        $config
     */
    public function __construct($name, array $types, array $config)
    {
        $this->elasticSearchName = isset($config['elasticSearchName']) ? $config['elasticSearchName'] : $name;
        $this->name = $name;
        $this->settings = isset($config['settings']) ? $config['settings'] : [];
        $this->types = $types;

        $this->setAliasStrategy($config['aliasStrategy']);
    }

    /**
     * @return string
     */
    public function getElasticSearchName(): string
    {
        return $this->elasticSearchName;
    }

    /**
     * @return string
     */
    public function getName(): string
    {
        return $this->name;
    }

    /**
     * @return array
     */
    public function getSettings(): array
    {
        return $this->settings;
    }

    /**
     * @param string $typeName
     *
     * @return TypeConfig
     *
     * @throws \InvalidArgumentException
     */
    public function getType($typeName): TypeConfig
    {
        if (! array_key_exists($typeName, $this->types)) {
            throw new \InvalidArgumentException(sprintf('Type "%s" does not exist on index "%s"', $typeName, $this->name));
        }

        return $this->types[$typeName];
    }

    public function hasType($name): bool
    {
        return array_key_exists($name, $this->types);
    }

    /**
     * @return \Fazland\ElasticaBundle\Configuration\TypeConfig[]
     */
    public function getTypes(): array
    {
        return $this->types;
    }

    /**
     * @return bool
     */
    public function isUseAlias(): bool
    {
        return null !== $this->aliasStrategy;
    }

    /**
     * @return null|string
     */
    public function getAliasStrategy()
    {
        return $this->aliasStrategy;
    }

    /**
     * @param null|string $aliasStrategy
     */
    public function setAliasStrategy($aliasStrategy)
    {
        if (empty($aliasStrategy)) {
            $aliasStrategy = null;
        }

        $this->aliasStrategy = $aliasStrategy;
    }
}
